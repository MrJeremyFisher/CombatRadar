plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version
    inputs.property "neoforge_version", project.neoforge_version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "issues_url", project.issues_url

    filesMatching("META-INF/neoforge.mods.toml") {
        expand(
                [
                        "version"   : project.version,
                        "neoforge_version"   : project.neoforge_version,
                        "minecraft_version"   : project.minecraft_version,
                        "issues_url": rootProject.issues_url
                ]
        )
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "neoforge"
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

tasks.register('cleanJar', Delete) {
    delete fileTree('../dist') {
        include "*-neoforge.jar"
    }
}

tasks.register('copyJar', Copy) {
    from remapJar
    into '../dist'
}

build.dependsOn copyJar
copyJar.dependsOn cleanJar
